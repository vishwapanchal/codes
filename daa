public class MergeSort {

    // Merge two halves
    static void merge(int[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        int[] L = new int[n1];
        int[] R = new int[n2];

        for (int i = 0; i < n1; i++)
            L[i] = arr[left + i];
        for (int j = 0; j < n2; j++)
            R[j] = arr[mid + 1 + j];

        int i = 0, j = 0, k = left;

        while (i < n1 && j < n2) {
            if (L[i] <= R[j])
                arr[k++] = L[i++];
            else
                arr[k++] = R[j++];
        }

        while (i < n1)
            arr[k++] = L[i++];
        while (j < n2)
            arr[k++] = R[j++];
    }

    // Recursive sort function
    static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }

    public static void main(String[] args) {
        int[] arr = { 38, 27, 43, 3, 9, 82, 10 };
        int n = arr.length;

        System.out.println("Original array:");
        for (int num : arr)
            System.out.print(num + " ");

        mergeSort(arr, 0, n - 1);

        System.out.println("\nSorted array:");
        for (int num : arr)
            System.out.print(num + " ");
    }
}

===============================

public class QuickSort {

    // Partition method
    static int partition(int[] arr, int low, int high) {
        int pivot = arr[high]; // choose last element as pivot
        int i = low - 1;

        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                // swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // swap pivot to correct position
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

    // Recursive quick sort
    static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high); // partition index
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    public static void main(String[] args) {
        int[] arr = { 10, 7, 8, 9, 1, 5 };
        int n = arr.length;

        System.out.println("Original array:");
        for (int num : arr)
            System.out.print(num + " ");

        quickSort(arr, 0, n - 1);

        System.out.println("\nSorted array:");
        for (int num : arr)
            System.out.print(num + " ");
    }
}


=========================================================

import java.util.Scanner;

public class BFS {

    static int[][] graph;
    static boolean[] visited;
    static int n;

    // Queue implementation
    static class Queue {
        int[] arr;
        int front, rear, size;

        Queue(int capacity) {
            arr = new int[capacity];
            front = rear = -1;
        }

        boolean isEmpty() {
            return front == -1;
        }

        void enqueue(int data) {
            if (rear == arr.length - 1) return;
            if (front == -1) front = 0;
            arr[++rear] = data;
        }

        int dequeue() {
            if (isEmpty()) return -1;
            int data = arr[front];
            if (front == rear) front = rear = -1;
            else front++;
            return data;
        }
    }

    static void bfs(int start) {
        Queue q = new Queue(n);
        visited[start] = true;
        q.enqueue(start);

        while (!q.isEmpty()) {
            int node = q.dequeue();
            System.out.print(node + " ");

            for (int i = 0; i < n; i++) {
                if (graph[node][i] == 1 && !visited[i]) {
                    visited[i] = true;
                    q.enqueue(i);
                }
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of nodes: ");
        n = sc.nextInt();

        graph = new int[n][n];
        visited = new boolean[n];

        System.out.println("Enter adjacency matrix:");
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                graph[i][j] = sc.nextInt();

        System.out.print("Enter starting node (0 to n-1): ");
        int start = sc.nextInt();

        System.out.println("BFS Traversal:");
        bfs(start);
    }
}



================================================
import java.util.Scanner;

public class TopologicalSort {

    static int[][] graph;
    static boolean[] visited;
    static int[] stack;
    static int top = -1;
    static int n;

    static void dfs(int node) {
        visited[node] = true;

        for (int i = 0; i < n; i++) {
            if (graph[node][i] == 1 && !visited[i])
                dfs(i);
        }

        stack[++top] = node;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of nodes: ");
        n = sc.nextInt();

        graph = new int[n][n];
        visited = new boolean[n];
        stack = new int[n];

        System.out.println("Enter adjacency matrix:");
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                graph[i][j] = sc.nextInt();

        for (int i = 0; i < n; i++)
            if (!visited[i])
                dfs(i);

        System.out.println("Topological Order:");
        while (top >= 0)
            System.out.print(stack[top--] + " ");
    }
}

==================================================
import java.util.Scanner;

public class TopologicalSort {

    static int[][] graph;
    static boolean[] visited;
    static int[] stack;
    static int top = -1;
    static int n;

    static void dfs(int node) {
        visited[node] = true;

        for (int i = 0; i < n; i++) {
            if (graph[node][i] == 1 && !visited[i])
                dfs(i);
        }

        stack[++top] = node;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of nodes: ");
        n = sc.nextInt();

        graph = new int[n][n];
        visited = new boolean[n];
        stack = new int[n];

        System.out.println("Enter adjacency matrix:");
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                graph[i][j] = sc.nextInt();

        for (int i = 0; i < n; i++)
            if (!visited[i])
                dfs(i);

        System.out.println("Topological Order:");
        while (top >= 0)
            System.out.print(stack[top--] + " ");
    }
}
===========================================================

import java.util.Scanner;

public class ElementUniqueness {

    static boolean hasDuplicate(int[] arr, int n) {
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (arr[i] == arr[j])
                    return true;  // Duplicate found
            }
        }
        return false;  // All elements unique
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of elements: ");
        int n = sc.nextInt();

        int[] arr = new int[n];
        System.out.println("Enter elements:");
        for (int i = 0; i < n; i++)
            arr[i] = sc.nextInt();

        if (hasDuplicate(arr, n))
            System.out.println("Array has duplicate elements.");
        else
            System.out.println("All elements are unique.");
    }
}

================================================================

import java.util.Scanner;

public class Horspool {

    static int[] shiftTable = new int[256];

    // Preprocessing to build shift table
    static void buildShiftTable(String pattern) {
        int m = pattern.length();

        for (int i = 0; i < 256; i++)
            shiftTable[i] = m;  // default shift

        for (int i = 0; i < m - 1; i++)
            shiftTable[pattern.charAt(i)] = m - 1 - i;
    }

    static int horspoolSearch(String text, String pattern) {
        int n = text.length();
        int m = pattern.length();
        int i = m - 1;

        while (i < n) {
            int k = 0;
            while (k < m && pattern.charAt(m - 1 - k) == text.charAt(i - k))
                k++;

            if (k == m)
                return i - m + 1;  // match found

            i += shiftTable[text.charAt(i)];
        }

        return -1;  // not found
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the text: ");
        String text = sc.nextLine();

        System.out.print("Enter the pattern: ");
        String pattern = sc.nextLine();

        buildShiftTable(pattern);
        int pos = horspoolSearch(text, pattern);

        if (pos == -1)
            System.out.println("Pattern not found.");
        else
            System.out.println("Pattern found at position: " + pos);
    }
}


==================================================================

import java.util.Scanner;

public class BoyerMoore {

    static int[] buildBadCharTable(String pattern) {
        int[] table = new int[256];
        int m = pattern.length();

        // Initialize all occurrences to -1
        for (int i = 0; i < 256; i++)
            table[i] = -1;

        // Fill actual value of last occurrence
        for (int i = 0; i < m; i++)
            table[pattern.charAt(i)] = i;

        return table;
    }

    static int boyerMooreSearch(String text, String pattern) {
        int[] badChar = buildBadCharTable(pattern);
        int n = text.length();
        int m = pattern.length();
        int shift = 0;

        while (shift <= n - m) {
            int j = m - 1;

            // Compare from end of pattern
            while (j >= 0 && pattern.charAt(j) == text.charAt(shift + j))
                j--;

            if (j < 0) {
                return shift;  // pattern found
            } else {
                // Shift pattern based on bad character
                int badCharIndex = text.charAt(shift + j);
                shift += Math.max(1, j - badChar[badCharIndex]);
            }
        }

        return -1;  // pattern not found
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the text: ");
        String text = sc.nextLine();

        System.out.print("Enter the pattern: ");
        String pattern = sc.nextLine();

        int pos = boyerMooreSearch(text, pattern);

        if (pos == -1)
            System.out.println("Pattern not found.");
        else
            System.out.println("Pattern found at position: " + pos);
    }
}

=======================================================
import java.util.Scanner;

public class FloydWarshall {

    static final int INF = 99999;

    static void floydWarshall(int[][] graph, int n) {
        int[][] dist = new int[n][n];

        // Copy graph to dist matrix
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                dist[i][j] = graph[i][j];

        // Floyd-Warshall main logic
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (dist[i][k] + dist[k][j] < dist[i][j])
                        dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }

        // Display result
        System.out.println("Shortest distances between all pairs:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dist[i][j] == INF)
                    System.out.print("INF ");
                else
                    System.out.print(dist[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of vertices: ");
        int n = sc.nextInt();

        int[][] graph = new int[n][n];
        System.out.println("Enter adjacency matrix (use 99999 for INF):");
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                graph[i][j] = sc.nextInt();

        floydWarshall(graph, n);
    }
}
========================================================================

import java.util.Scanner;

public class Knapsack01 {

    static int knapsack(int[] weight, int[] value, int n, int capacity) {
        int[][] dp = new int[n + 1][capacity + 1];

        // Build table dp[][] in bottom-up manner
        for (int i = 0; i <= n; i++) {
            for (int w = 0; w <= capacity; w++) {
                if (i == 0 || w == 0)
                    dp[i][w] = 0;
                else if (weight[i - 1] <= w)
                    dp[i][w] = Math.max(value[i - 1] + dp[i - 1][w - weight[i - 1]], dp[i - 1][w]);
                else
                    dp[i][w] = dp[i - 1][w];
            }
        }

        return dp[n][capacity];
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of items: ");
        int n = sc.nextInt();

        int[] weight = new int[n];
        int[] value = new int[n];

        System.out.println("Enter weights:");
        for (int i = 0; i < n; i++)
            weight[i] = sc.nextInt();

        System.out.println("Enter values:");
        for (int i = 0; i < n; i++)
            value[i] = sc.nextInt();

        System.out.print("Enter capacity of knapsack: ");
        int capacity = sc.nextInt();

        int maxValue = knapsack(weight, value, n, capacity);
        System.out.println("Maximum value in Knapsack = " + maxValue);
    }
}

=================================================================================
class Dijkstra {
    static final int V = 5; // Number of vertices

    int minDistance(int dist[], boolean sptSet[]) {
        int min = Integer.MAX_VALUE, min_index = -1;
        for (int v = 0; v < V; v++)
            if (!sptSet[v] && dist[v] <= min) {
                min = dist[v];
                min_index = v;
            }
        return min_index;
    }

    void dijkstra(int graph[][], int src) {
        int dist[] = new int[V];
        boolean sptSet[] = new boolean[V];

        for (int i = 0; i < V; i++) {
            dist[i] = Integer.MAX_VALUE;
            sptSet[i] = false;
        }
        dist[src] = 0;

        for (int count = 0; count < V - 1; count++) {
            int u = minDistance(dist, sptSet);
            sptSet[u] = true;

            for (int v = 0; v < V; v++)
                if (!sptSet[v] && graph[u][v] != 0 &&
                    dist[u] != Integer.MAX_VALUE &&
                    dist[u] + graph[u][v] < dist[v])
                    dist[v] = dist[u] + graph[u][v];
        }

        System.out.println("Vertex \t Distance from Source");
        for (int i = 0; i < V; i++)
            System.out.println(i + " \t\t " + dist[i]);
    }

    public static void main(String[] args) {
        int graph[][] = new int[][] {
            {0, 10, 0, 0, 5},
            {0, 0, 1, 0, 2},
            {0, 0, 0, 4, 0},
            {7, 0, 6, 0, 0},
            {0, 3, 9, 2, 0}
        };
        Dijkstra t = new Dijkstra();
        t.dijkstra(graph, 0);
    }
}

======================================================================

class Prim {
    static final int V = 5;

    int minKey(int key[], boolean mstSet[]) {
        int min = Integer.MAX_VALUE, min_index = -1;
        for (int v = 0; v < V; v++)
            if (!mstSet[v] && key[v] < min) {
                min = key[v];
                min_index = v;
            }
        return min_index;
    }

    void primMST(int graph[][]) {
        int parent[] = new int[V];
        int key[] = new int[V];
        boolean mstSet[] = new boolean[V];

        for (int i = 0; i < V; i++) {
            key[i] = Integer.MAX_VALUE;
            mstSet[i] = false;
        }
        key[0] = 0;
        parent[0] = -1;

        for (int count = 0; count < V - 1; count++) {
            int u = minKey(key, mstSet);
            mstSet[u] = true;

            for (int v = 0; v < V; v++)
                if (graph[u][v] != 0 && !mstSet[v] && graph[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = graph[u][v];
                }
        }

        System.out.println("Edge \tWeight");
        for (int i = 1; i < V; i++)
            System.out.println(parent[i] + " - " + i + "\t" + graph[i][parent[i]]);
    }

    public static void main(String[] args) {
        int graph[][] = new int[][] {
            {0, 2, 0, 6, 0},
            {2, 0, 3, 8, 5},
            {0, 3, 0, 0, 7},
            {6, 8, 0, 0, 9},
            {0, 5, 7, 9, 0}
        };
        Prim t = new Prim();
        t.primMST(graph);
    }
}


=========================================================================================
class AssignmentProblem {
    static int n = 3;
    static int minCost = Integer.MAX_VALUE;

    static void permute(int[][] cost, boolean[] visited, int row, int currCost) {
        if (row == n) {
            if (currCost < minCost)
                minCost = currCost;
            return;
        }
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                visited[i] = true;
                permute(cost, visited, row + 1, currCost + cost[row][i]);
                visited[i] = false;
            }
        }
    }

    public static void main(String[] args) {
        int[][] cost = {
            {9, 2, 7},
            {6, 4, 3},
            {5, 8, 1}
        };
        boolean[] visited = new boolean[n];
        permute(cost, visited, 0, 0);
        System.out.println("Minimum Assignment Cost: " + minCost);
    }
}

==========================================================================================
class TSP {
    static int n = 4;
    static int[][] graph = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };
    static int minPath = Integer.MAX_VALUE;

    static void tsp(boolean[] visited, int currPos, int count, int cost, int start) {
        if (count == n && graph[currPos][start] > 0) {
            minPath = Math.min(minPath, cost + graph[currPos][start]);
            return;
        }
        for (int i = 0; i < n; i++) {
            if (!visited[i] && graph[currPos][i] > 0) {
                visited[i] = true;
                tsp(visited, i, count + 1, cost + graph[currPos][i], start);
                visited[i] = false;
            }
        }
    }

    public static void main(String[] args) {
        boolean[] visited = new boolean[n];
        visited[0] = true;
        tsp(visited, 0, 1, 0, 0);
        System.out.println("Minimum TSP path cost: " + minPath);
    }
}
=====================================================================================
class SumOfSubset {
    static int[] set = {10, 7, 5, 18, 12, 20, 15};
    static int n = set.length;
    static int target = 35;

    static void subset(int i, int sum, String result) {
        if (sum == target) {
            System.out.println(result);
            return;
        }
        if (i == n || sum > target)
            return;

        subset(i + 1, sum + set[i], result + set[i] + " ");
        subset(i + 1, sum, result);
    }

    public static void main(String[] args) {
        subset(0, 0, "");
    }
}
=====================================================================================
